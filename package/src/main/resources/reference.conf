# Azure Cosmos Extensions for DataStax Java Driver 4 for Apache Cassandra reference configuration
#
# Override the values provided here to match your environment and preferences. The default values set here are known to
# work well with the Cosmos Cassandra API. For a general discussion of DataStax Java Driver 4 configuration, see
# https://docs.datastax.com/en/developer/java-driver/4.9/manual/core/configuration/

datastax-java-driver {
  advanced {
    auth-provider {
      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the PlainTextAuthProvider is used by
      # default. This is because the Cosmos DB Cassandra API requires authentication and uses plain text authentication
      # by default.
      class = PlainTextAuthProvider
    }
    metadata {
      token-map {
        # Token maps are disabled because they are not relevant to routing when DataStax Java Driver 4 is used to access
        # a Cosmos Cassandra instance. You will see this spurious warning message in the logs when token-map.enabled is
        # true:
        #
        #   [<session-name>] Unexpected error while refreshing token map, keeping previous version
        #   (IllegalArgumentException: Multiple entries with same key: Murmur3Token...
        enabled = false
      }
    }
    retry-policy {
      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions CosmosRetryPolicy is used by default.
      # This provides a good out-of-box experience for communicating with Cosmos Cassandra instances.
      class = com.azure.cosmos.cassandra.CosmosRetryPolicy
      max-retries = 5              # Maximum number of retries
      fixed-backoff-time = 5000    # Fixed backoff time in milliseconds
      growing-backoff-time = 1000  # Growing backoff time in milliseconds
    }
    ssl-engine-factory {
      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the DefaultSslEngineFactory is used by
      # default. The Cosmos Cassandra API requires SSL.
      class = DefaultSslEngineFactory
    }
  }
  basic {
    # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions we use the address of a local instance of
    # the Azure Cosmos DB Emulator for local development and testing as the default contact point.

    contact-points = ["localhost:10350"]

    load-balancing-policy {

      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the CosmosLoadBalancingPolicy is used
      # by default. This provides a good out-of-box experience for communicating with Cosmos Cassandra instances.
      class = com.azure.cosmos.cassandra.CosmosLoadBalancingPolicy

      # DNS expiry time in seconds
      dns-expiry-time = 60

      # Global endpoint for connecting to Cosmos
      #
      #   When global-endpoint is specified, you may specify a read-datacenter, but must not specify a write-datacenter.
      #   Writes will go to the default write region when global-endpoint is specified.
      #
      #   When global-endpoint is not specified, you must specify both a read-datacenter and a write-datacenter.

      global-endpoint = ""

      # Datacenter for read operations

      read-datacenter = ""

      # Datacenter for write operations

      write-datacenter = ""
    }
    request {
      # A request timeout of 5 seconds provides a better out-of-box experience than the default value of 2 seconds.
      # Adjust this value up or down based on workload and Cosmos Cassandra througput provisioning. The more
      # throughput you provision, the lower you might set this value.
      timeout = "5 seconds"
    }
  }
}
